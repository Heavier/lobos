#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('lobos:server');
var http = require('http');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function(){
    console.log('Listening on port 5000, welcome boss.');
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = server;



var io = require('socket.io').listen(server);

// usernames which are currently connected to the chat
var usernames = {};
// rooms which are currently available in chat
// var rooms = ['room1', 'room2', 'room3'];

io.sockets.on('connection', function(socket){

    socket.on('addUser', function(username, roomcode){
        // store the username in the socket session for this client
        socket.username = username;
		// store the room name in the socket session for this client
        socket.room = roomcode;
		// add the client's username to the global list
        usernames[username] = "#"+roomcode+"#";
		// send client to room 1
        socket.join(socket.room);
		// echo to client they've connected
        socket.emit('updateChat', 'SERVER', 'Bienvenid@ a la sala ' + socket.room + ', Â¡A JUGAR!');
		// echo to room 1 that a person has connected to their room
        socket.broadcast.to(socket.room).emit('updateChat', 'SERVER', username + ' acaba de llegar');
        // io.sockets.in(socket.room).emit('listUsers', usernames);
        getUsers(roomcode);
        // socket.emit('updateRooms', rooms, socket.room);
        console.log(usernames);
    });

    socket.on('sendChat', function(data){
        io.sockets.in(socket.room).emit('updateChat', socket.username, data);
    });


    socket.on('imReady', function(username, roomcode){
        io.sockets.in(socket.room).emit('updateChat', 'SERVER', username + ' quiere empezar ya');
        var auxusers = {};
        for (user in usernames){
            if (usernames[user].indexOf(roomcode) !== -1){
                if (user == username){
                    usernames[user] = "#"+roomcode+"#"+"R#";
                }
                auxusers[user] = usernames[user];
            }
        }
        var counter = 0;
        var size = 0;
        for (user in auxusers){
            if (usernames[user].indexOf("#R#") !== -1){
                counter++;
            }
            size++;
        }
        if (counter == size && size > 1){
            io.sockets.in(socket.room).emit('updateChat', 'SERVER', "Comencemos, los equipos son...");
            var countA = size / 2;
            counter = 1;
            for (user in auxusers){
                if (usernames[user].indexOf("#A#") == -1 && counter <= countA){
                    counter++;
                    usernames[user] = "#"+roomcode+"#"+"R#"+"A#";
                }else{
                    usernames[user] = "#"+roomcode+"#"+"R#"+"B#";
                }
            }
        }
        console.log("Usernames:");
        console.log(usernames);
        getUsers(roomcode);
    });

    function getUsers(roomcode){
        var auxusers = {};
        for (user in usernames){
            if (usernames[user].indexOf(roomcode) !== -1){
                auxusers[user] = usernames[user];
            }
        }
        console.log(auxusers);
        io.sockets.in(socket.room).emit('listUsers', auxusers);
    }

    socket.on('disconnect', function(){
        delete usernames[socket.username];
        // io.sockets.in(socket.room).emit('deleteUser', socket.username);
        // io.sockets.in(socket.room).emit('listUsers', usernames);
        getUsers(socket.room);
        socket.broadcast.to(socket.room).emit('updateChat', 'SERVER', socket.username + ' se ha ido...');
        socket.leave(socket.room);
    });
});
